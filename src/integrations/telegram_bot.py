import asyncio
import logging
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from src.services.signal_service import SignalService
from src.config.settings import TELEGRAM_BOT_TOKEN, SUPPORTED_PAIRS, SUPPORTED_TIMEFRAMES, BUTTONS_PER_ROW

logger = logging.getLogger(__name__)

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.signal_service = SignalService()
        self.application = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == 'your_bot_token_here':
            logger.error("Telegram bot token not configured!")
            return
            
        self.application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("overview", self.overview_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        logger.info("Starting Telegram bot...")
        await self.application.run_polling()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = (
            "üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Signal Bot!**\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –º–æ–¥–µ–ª–µ–π.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/overview - –û–±–∑–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä\n\n"
            "**–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:**"
        )
        
        keyboard = self._create_pair_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ –æ–±–∑–æ—Ä –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:**\n"
            "‚Ä¢ SOL/USDT (Solana)\n"
            "‚Ä¢ BTC/USDT (Bitcoin)\n"
            "‚Ä¢ ETH/USDT (Ethereum)\n"
            "‚Ä¢ HYPE/USDT (Hype)\n\n"
            "**–¢–∞–π–º—Ñ—Ä–µ–π–º—ã:**\n"
            "‚Ä¢ 15m - 15 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 1h - 1 —á–∞—Å\n"
            "‚Ä¢ 4h - 4 —á–∞—Å–∞\n"
            "‚Ä¢ 1d - 1 –¥–µ–Ω—å\n\n"
            "**–°–∏–≥–Ω–∞–ª—ã:**\n"
            "üü¢ LONG - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞\n"
            "üî¥ SHORT - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞\n"
            "‚ö™ NONE - –ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n\n"
            "**–í–∞–∂–Ω–æ:** –≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑!"
        )
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def overview_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /overview"""
        await update.message.reply_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞:")
        
        keyboard = self._create_pair_keyboard(action="overview")
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É:",
            reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        try:
            if data.startswith("pair_"):
                # –í—ã–±–æ—Ä –ø–∞—Ä—ã
                symbol = data.replace("pair_", "")
                await self._handle_pair_selection(query, symbol)
                
            elif data.startswith("overview_"):
                # –û–±–∑–æ—Ä –ø–∞—Ä—ã
                symbol = data.replace("overview_", "")
                await self._handle_overview_request(query, symbol)
                
            elif data.startswith("timeframe_"):
                # –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                parts = data.replace("timeframe_", "").split("_")
                symbol = parts[0]
                timeframe = parts[1]
                await self._handle_timeframe_selection(query, symbol, timeframe)
                
            elif data == "back_to_pairs":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä—ã
                await self._show_pair_selection(query)
                
        except Exception as e:
            logger.error(f"Error handling button callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _handle_pair_selection(self, query, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
        overview = self.signal_service.get_overview_for_pair(symbol)
        
        if overview.get('success', False):
            message = self.signal_service.format_overview_message(overview)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            keyboard = self._create_timeframe_keyboard(symbol)
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}"
            if 'error' in overview:
                error_msg += f"\n{overview['error']}"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º", callback_data="back_to_pairs")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                error_msg,
                reply_markup=reply_markup
            )
    
    async def _handle_overview_request(self, query, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–∑–æ—Ä–∞"""
        await self._handle_pair_selection(query, symbol)
    
    async def _handle_timeframe_selection(self, query, symbol: str, timeframe: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        signal = self.signal_service.get_signal_for_pair(symbol, timeframe)
        
        if signal.get('success', False):
            message = self.signal_service.format_signal_message(signal)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É", callback_data=f"pair_{symbol}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_pairs")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol} {timeframe}"
            if 'error' in signal:
                error_msg += f"\n{signal['error']}"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É", callback_data=f"pair_{symbol}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_pairs")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                error_msg,
                reply_markup=reply_markup
            )
    
    async def _show_pair_selection(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞—Ä—ã"""
        welcome_message = (
            "üöÄ **Crypto Signal Bot**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:"
        )
        
        keyboard = self._create_pair_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def _create_pair_keyboard(self, action: str = "pair") -> list:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã"""
        keyboard = []
        row = []
        
        for i, pair in enumerate(SUPPORTED_PAIRS):
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–∞—Ä
            pair_emoji = {
                'SOL/USDT': 'üü£',
                'BTC/USDT': 'üü°',
                'ETH/USDT': 'üîµ',
                'HYPE/USDT': 'üü¢'
            }
            
            emoji = pair_emoji.get(pair, 'üí∞')
            button_text = f"{emoji} {pair}"
            callback_data = f"{action}_{pair}"
            
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            
            if len(row) == BUTTONS_PER_ROW:
                keyboard.append(row)
                row = []
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
        
        return keyboard
    
    def _create_timeframe_keyboard(self, symbol: str) -> list:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        keyboard = []
        row = []
        
        for i, timeframe in enumerate(SUPPORTED_TIMEFRAMES):
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            timeframe_emoji = {
                '15m': '‚è±Ô∏è',
                '1h': 'üïê',
                '4h': 'üïì',
                '1d': 'üìÖ'
            }
            
            emoji = timeframe_emoji.get(timeframe, '‚è∞')
            button_text = f"{emoji} {timeframe}"
            callback_data = f"timeframe_{symbol}_{timeframe}"
            
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            
            if len(row) == 2:  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                keyboard.append(row)
                row = []
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º", callback_data="back_to_pairs")])
        
        return keyboard 