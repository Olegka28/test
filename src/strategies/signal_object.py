from dataclasses import dataclass
from typing import Dict, Optional
from datetime import datetime
from enum import Enum


class SignalType(Enum):
    LONG = "long"
    SHORT = "short"


class ConfidenceLevel(Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"


@dataclass
class SignalObject:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    """
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    symbol: str
    timeframe: str
    signal_type: SignalType
    timestamp: datetime
    
    # –¶–µ–Ω—ã
    entry_price: float
    take_profit: float
    stop_loss: float
    
    # –ú–æ–¥–µ–ª—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    probability: float
    confidence: ConfidenceLevel
    model_accuracy: float
    
    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    analysis: Dict
    
    # –†–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    risk_reward_ratio: float
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    position_size: Optional[float] = None
    commission_cost: Optional[float] = None
    market_condition: Optional[str] = None
    volatility_level: Optional[str] = None
    trend_alignment: Optional[str] = None
    is_autoscan: bool = False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π."""
        if self.probability < 0 or self.probability > 1:
            raise ValueError("Probability must be between 0 and 1")
        
        if self.entry_price <= 0:
            raise ValueError("Entry price must be positive")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º risk/reward ratio
        if self.signal_type == SignalType.LONG:
            profit = self.take_profit - self.entry_price
            risk = self.entry_price - self.stop_loss
        else:  # SHORT
            profit = self.entry_price - self.take_profit
            risk = self.stop_loss - self.entry_price
        
        if risk > 0:
            self.risk_reward_ratio = profit / risk
        else:
            self.risk_reward_ratio = 0.0
    
    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        d = {
            'symbol': self.symbol,
            'timeframe': self.timeframe,
            'signal_type': self.signal_type.value,
            'timestamp': self.timestamp.isoformat(),
            'entry_price': self.entry_price,
            'take_profit': self.take_profit,
            'stop_loss': self.stop_loss,
            'probability': self.probability,
            'confidence': self.confidence.value,
            'model_accuracy': self.model_accuracy,
            'analysis': self.analysis,
            'risk_reward_ratio': self.risk_reward_ratio,
            'position_size': self.position_size,
            'commission_cost': self.commission_cost,
            'market_condition': self.market_condition,
            'volatility_level': self.volatility_level,
            'trend_alignment': self.trend_alignment,
            'is_autoscan': self.is_autoscan,
        }
        return d
    
    def to_telegram_message(self, postfix: Optional[str] = None) -> str:
        signal_emoji = "üü¢" if self.signal_type == SignalType.LONG else "üî¥"
        confidence_emoji = {
            ConfidenceLevel.LOW: "üü°",
            ConfidenceLevel.MEDIUM: "üü†",
            ConfidenceLevel.HIGH: "üü¢"
        }[self.confidence]
        autoscan_note = "\nü§ñ _–°–∏–≥–Ω–∞–ª —Å –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è_" if self.is_autoscan else ""
        message = (
            f"{signal_emoji} **{self.symbol} {self.timeframe} {self.signal_type.value.upper()}**\n\n"
            f"üí∞ **Entry:** ${self.entry_price:,.2f}\n"
            f"üéØ **Take Profit:** ${self.take_profit:,.2f}\n"
            f"üõë **Stop Loss:** ${self.stop_loss:,.2f}\n\n"
            f"üìä **Probability:** {self.probability:.1%}\n"
            f"{confidence_emoji} **Confidence:** {self.confidence.value.upper()}\n"
            f"‚öñÔ∏è **Risk/Reward:** {self.risk_reward_ratio:.2f}\n\n"
            f"üìà **Analysis:**\n"
            f"‚Ä¢ Trend: {self.analysis.get('trend', 'N/A')}\n"
            f"‚Ä¢ Volatility: {self.analysis.get('volatility_level', 'N/A')}\n"
            f"‚Ä¢ Volume: {self.analysis.get('volume_signal', 'N/A')}\n"
            f"‚Ä¢ Market: {self.analysis.get('market_condition', 'N/A')}\n\n"
            f"üéØ **Model Accuracy:** {self.model_accuracy:.1%}\n"
            f"‚è∞ **Time:** {self.timestamp.strftime('%Y-%m-%d %H:%M UTC')}"
            f"{autoscan_note}"
        )
        if postfix:
            message += f"\n{postfix}"
        return message.strip()
    
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞."""
        return (
            self.probability >= 0.6 and  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            self.risk_reward_ratio >= 1.5 and  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R/R
            self.confidence != ConfidenceLevel.LOW and  # –ù–µ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            self.market_condition != 'unfavorable'  # –ù–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        )
    
    @classmethod
    def from_dict(cls, data: Dict) -> 'SignalObject':
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
        return cls(
            symbol=data['symbol'],
            timeframe=data['timeframe'],
            signal_type=SignalType(data['signal_type']),
            timestamp=datetime.fromisoformat(data['timestamp']),
            entry_price=data['entry_price'],
            take_profit=data['take_profit'],
            stop_loss=data['stop_loss'],
            probability=data['probability'],
            confidence=ConfidenceLevel(data['confidence']),
            model_accuracy=data['model_accuracy'],
            analysis=data['analysis'],
            risk_reward_ratio=data['risk_reward_ratio'],
            position_size=data.get('position_size'),
            commission_cost=data.get('commission_cost'),
            market_condition=data.get('market_condition'),
            volatility_level=data.get('volatility_level'),
            trend_alignment=data.get('trend_alignment'),
            is_autoscan=data.get('is_autoscan', False)
        ) 